[ { "title": "[BOJ] 18405번 경쟁적 전염 (Java/BFS)", "url": "/posts/boj-18405/", "categories": "Problem Solving, BOJ", "tags": "boj, graph, bfs", "date": "2022-06-30 12:00:00 +0900", "snippet": "문제백준 18405번 경쟁적 전염풀이 바이러스의 위치와 번호를 저장하기 위한 Virus 클래스를 정의합니다. 이때 바이러스 번호를 오름차순으로 정렬하기 위해 Comparable 인터페이스를 사용합니다. 주어진 시험관의 정보를 입력받습니다. 바이러스가 있을 경우 해당 바이러스의 번호와 좌표를 virus 리스트에 추가합니다. 바이러스는 작은 번호부터 순서대로 증식하므로 virus 배열을 바이러스 번호 기준으로 정렬해줍니다. 정렬된 바이러스 리스트를 queue에 삽입합니다. BFS를 통해 S초 동안 바이러스를 증식시키고, (X, Y) 좌표의 바이러스 번호를 출력합니다.소스 코드import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Collections;import java.util.LinkedList;import java.util.List;import java.util.Queue;import java.util.StringTokenizer;public class Main {\tstatic class Virus implements Comparable&lt;Virus&gt; {\t\tint num, x, y;\t\tpublic Virus(int num, int x, int y) {\t\t\tsuper();\t\t\tthis.num = num;\t\t\tthis.x = x;\t\t\tthis.y = y;\t\t}\t\t@Override\t\tpublic int compareTo(Virus o) {\t\t\treturn this.num - o.num;\t\t}\t}\tstatic List&lt;Virus&gt; virus;\tstatic Queue&lt;Virus&gt; queue;\tstatic int[] dx = { -1, 1, 0, 0 };\tstatic int[] dy = { 0, 0, -1, 1 };\tpublic static void main(String[] args) throws Exception {\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\tint N = Integer.parseInt(st.nextToken()); // 시험관 크기\t\tint K = Integer.parseInt(st.nextToken()); // K 종류의 바이러스\t\tint arr[][] = new int[N][N];\t\tvirus = new ArrayList&lt;Virus&gt;();\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tst = new StringTokenizer(br.readLine());\t\t\tfor (int j = 0; j &lt; N; j++) {\t\t\t\tarr[i][j] = Integer.parseInt(st.nextToken());\t\t\t\tif (arr[i][j] != 0) {\t\t\t\t\tvirus.add(new Virus(arr[i][j], i, j));\t\t\t\t}\t\t\t}\t\t}\t\tst = new StringTokenizer(br.readLine());\t\tint S = Integer.parseInt(st.nextToken());\t\tint X = Integer.parseInt(st.nextToken()) - 1;\t\tint Y = Integer.parseInt(st.nextToken()) - 1;\t\t// input end\t\tCollections.sort(virus);\t\tqueue = new LinkedList&lt;Virus&gt;();\t\tfor (int i = 0; i &lt; virus.size(); i++) {\t\t\tqueue.offer(virus.get(i));\t\t}\t\t// BFS\t\tfor (int s = 0; s &lt; S; s++) {\t\t\tif (queue.isEmpty())\t\t\t\tbreak;\t\t\tint size = queue.size();\t\t\tfor (int c = 0; c &lt; size; c++) {\t\t\t\tVirus cur = queue.poll();\t\t\t\tfor (int d = 0; d &lt; 4; d++) {\t\t\t\t\tint nx = cur.x + dx[d];\t\t\t\t\tint ny = cur.y + dy[d];\t\t\t\t\tif (nx &lt; 0 || nx &gt;= N || ny &lt; 0 || ny &gt;= N)\t\t\t\t\t\tcontinue;\t\t\t\t\tif (arr[nx][ny] == 0) { // 조건 없어서 메모리초과 발생\t\t\t\t\t\tarr[nx][ny] = cur.num;\t\t\t\t\t\tqueue.offer(new Virus(cur.num, nx, ny));\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tSystem.out.println(arr[X][Y]);\t}}오류 기록BFS 진행 시 시험관 칸에 바이러스가 존재하지 않을 경우에만 새로운 바이러스를 증식시킬 수 있다는 조건을 추가하지 않아 메모리초과 오류가 발생했습니다." }, { "title": "[BOJ] 14391번 종이 조각 (Java/DFS)", "url": "/posts/boj-14391/", "categories": "Problem Solving, BOJ", "tags": "boj, graph, dfs, brute-force", "date": "2022-06-29 21:00:00 +0900", "snippet": "문제백준 14391번 종이 조각풀이 DFS를 통해 check 배열에 가로, 세로를 표시합니다. 가로로 이어지는 숫자는 true, 세로로 이어지는 숫자는 false 입니다. check 배열을 전부 탐색하면 getSum 함수를 호출해 각 경우의 합의 구합니다. 최대 합과 비교하여 값을 갱신합니다.소스 코드import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.StringTokenizer;public class Main {\tstatic int N, M, arr[][];\tstatic boolean check[][];\tstatic int res;\tpublic static void main(String[] args) throws Exception {\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\tN = Integer.parseInt(st.nextToken());\t\tM = Integer.parseInt(st.nextToken());\t\tarr = new int[N][M];\t\tcheck = new boolean[N][M]; // 가로, 세로를 체크하기 위한 배열\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tString temp = br.readLine();\t\t\tfor (int j = 0; j &lt; M; j++) {\t\t\t\tarr[i][j] = temp.charAt(j) - '0';\t\t\t}\t\t} // input end\t\tres = 0;\t\tset(0, 0);\t\tSystem.out.println(res);\t}\tprivate static void getSum() {\t\tint sum = 0;\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tint temp = 0;\t\t\tfor (int j = 0; j &lt; M; j++) {\t\t\t\tif (check[i][j] == true) {\t\t\t\t\ttemp *= 10;\t\t\t\t\ttemp += arr[i][j];\t\t\t\t} else {\t\t\t\t\tsum += temp;\t\t\t\t\ttemp = 0;\t\t\t\t}\t\t\t}\t\t\tsum += temp;\t\t}\t\tfor (int j = 0; j &lt; M; j++) {\t\t\tint temp = 0;\t\t\tfor (int i = 0; i &lt; N; i++) {\t\t\t\tif (check[i][j] == false) {\t\t\t\t\ttemp *= 10;\t\t\t\t\ttemp += arr[i][j];\t\t\t\t} else {\t\t\t\t\tsum += temp;\t\t\t\t\ttemp = 0;\t\t\t\t}\t\t\t}\t\t\tsum += temp;\t\t}\t\tres = Math.max(res, sum);\t}\tprivate static void set(int x, int y) {\t\tif (x &gt;= N) { // 마지막 행까지 다 셋팅하면 합 구하기\t\t\tgetSum();\t\t\treturn;\t\t}\t\tif (y &gt;= M) {\t\t\tset(x + 1, 0);\t\t\treturn;\t\t}\t\tcheck[x][y] = true; // 가로\t\tset(x, y + 1);\t\tcheck[x][y] = false; // 세로\t\tset(x, y + 1);\t}}" }, { "title": "[Java] Garbage Collection", "url": "/posts/gc/", "categories": "Programming Language, Java", "tags": "java, gc", "date": "2022-06-29 09:00:00 +0900", "snippet": "Garbage CollectionGarbage Collection(GC)은 JVM 상에서 더 이상 사용되지 않는 데이터가 할당되어 있는 메모리를 해제시켜주는 장치입니다. 또한 자동으로 동작하기 때문에 개발자가 메모리 관리를 할 필요가 없습니다. 주로 관리하는 대상은 Heap 영역 내의 객체 중에서 참조되지 않은 데이터입니다.참조되어 있는지에 대한 개념을 reachability라 하고, 참조되고 있으면 reachable, 참조되고 있지 않으면 unreachable이라고 합니다. 또한 reachable로 인식되게 만들어주는 JVM Runtime Area들을 root set이라고 합니다.GC는 unreachable한 객체들을 garbage라고 인식합니다.Heap 영역 내부의 객체들은 Method Area, Stack, Native Stack에서 참조되면 reachable로 판정됩니다. 또한 reachable한 객체가 참조하고 있는 다른 객체 역시 reachable이 됩니다.unreachable로 판정된 객체들은 GC의 대상이 됩니다.GC AlgorithmGC에 사용되는 알고리즘을 살펴보기 전에 Stop-The-World와 Weak Generational Hypothesis 개념을 알아야 합니다. Stop-The-World JVM은 GC를 통해 여유 메모리를 확보할 수 있음 그러나 GC가 너무 빈번하게 발생하면 프로그램의 성능을 저하시킴 GC가 일어나면 GC를 담당하는 스레드를 제외한 모든 스레드는 일시적으로 작동을 멈추는데 이를 Stop-The-World 현상이라고 함 모든 스레드가 정지되기 때문에 작업이 실행되지 않고 성능이 저하됨 따라서 적절한 빈도의 GC가 실행되도록 하여, Stop-The-World 시간을 줄여야 함 Weak Generational Hypothesis GC를 성공적으로 수행하는 알고리즘을 설계하기 위한 가설 대부분의 객체는 빠르게 unreachable한 상태로 전환된다고 가정함 Heap의 메모리 영역 기준으로 오래된 영역에서 최신 영역으로의 참조 방향은 적게 존재한다고 가정함 Mark And Sweep Algorithm 가장 기본적인 알고리즘으로, root set으로부터 출발하여 참조되는 객체들을 마크함(Mark Phase) 이후에 마크되지 않은 객체들을 추적하여 삭제함(Sweep Phase) 메모리가 Fragmentation, 단편화되는 단점이 있음 메모리 단편화는, 메모리가 정렬되지 않은 조각으로 나뉘어져 추가적으로 메모리 할당이 되기 힘든 상태를 의미함 이를 해결하기 위한 알고리즘이 Mark And Compact AlgorithmMark And Compact Algorithm 참조되는 객체들에 대해서 마크함 참조되지 않은 객체는 삭제함 이후에 메모리를 정리하여 메모리 단편화를 해결함Minor GC와 Major GCGC는 일어나는 시점에 따라서 크게 Minor GC와 Major GC로 나눌 수 있습니다.Minor GC JVM의 Young 영역에서 일어나는 GC Young에 위치한 각각의 영역이 가득 차게 되어 더 이상 새로운 객체를 생성할 수 없을 때 발생 마크된(reachable) 영역이 다음 영역으로 복사되면서 이루어지며, 삭제는 일어나지 않음 Stop-The-World 시간이 매우 짧아 이루어지지 않는다고 간주하며, Major GC에 비해 속도가 빠름Major GC JVM의 Old 영역에서 일어나는 GC Stop-The-World 시간이 길며, 자바 프로그램 실행에 영향을 줌 이를 해결하기 위해 Mark And Compact Algorithm을 기반한 여러 GC 방식들이 선택 및 적용됨참고링크JVM에 관하여 - Part 4, Garbage Collection 기초" }, { "title": "[BOJ] 17141번 연구소 2 (Java/Combination/BFS)", "url": "/posts/boj-17141/", "categories": "Problem Solving, BOJ", "tags": "boj, graph, combination, bfs, brute-force", "date": "2022-06-28 20:00:00 +0900", "snippet": "문제백준 17141번 연구소 2풀이 comb 함수를 이용해 초기에 바이러스를 놓을 칸을 선택합니다. copy_map에서 벽은 -1, 초기에 바이러스를 위치시킨 곳은 -10으로 지정합니다. BFS 함수로 바이러스가 퍼지는데 걸리는 시간을 계산하여 copy_map에 저장합니다. 빈 칸이 있는지 확인하고, 없으면 최소 시간을 계산합니다.소스 코드import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Queue;import java.util.StringTokenizer;public class Main {\tstatic class Point {\t\tint x, y;\t\tpublic Point(int x, int y) {\t\t\tsuper();\t\t\tthis.x = x;\t\t\tthis.y = y;\t\t}\t}\tstatic int N, M, map[][];\tstatic List&lt;Point&gt; ableVirus;\tstatic int res;\tpublic static void main(String[] args) throws Exception {\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\tN = Integer.parseInt(st.nextToken());\t\tM = Integer.parseInt(st.nextToken());\t\tmap = new int[N][N];\t\tableVirus = new ArrayList&lt;Point&gt;();\t\tint blankCnt = 0;\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tst = new StringTokenizer(br.readLine());\t\t\tfor (int j = 0; j &lt; N; j++) {\t\t\t\tmap[i][j] = Integer.parseInt(st.nextToken());\t\t\t\tif (map[i][j] == 0) { // 빈 칸\t\t\t\t\tblankCnt++;\t\t\t\t} else if (map[i][j] == 1) { // 벽\t\t\t\t\tmap[i][j] = -1; // 벽은 -1로 바꿔줌\t\t\t\t} else if (map[i][j] == 2) { // 바이러스가 들어갈 수 있는 빈 칸\t\t\t\t\tableVirus.add(new Point(i, j)); // 바이러스가 올 수 있는 빈 칸 추가\t\t\t\t\tmap[i][j] = 0; // 빈 칸 0으로 바꿔줌\t\t\t\t\tblankCnt++; // 빈 칸 카운트\t\t\t\t}\t\t\t}\t\t} // input end\t\tres = Integer.MAX_VALUE;\t\tif (blankCnt == M) { // 빈 칸이랑 바이러스 수 같으면 더 퍼트릴 필요 없음\t\t\tres = 0;\t\t} else {\t\t\tArrayList&lt;Point&gt; virus = new ArrayList&lt;&gt;();\t\t\tcomb(0, 0, virus);\t\t}\t\tif (res == Integer.MAX_VALUE)\t\t\tres = -1;\t\tSystem.out.println(res);\t}\t// 바이러스 놓을 위치 M개 고르는 함수\tprivate static void comb(int start, int cnt, ArrayList&lt;Point&gt; virus) {\t\tif (cnt == M) { // 바이러스 놓을 위치 M개를 고르면\t\t\tint[][] copy_map = BFS(copyArr(map), virus);\t\t\tres = Math.min(res, check(copy_map));\t\t\treturn;\t\t}\t\tfor (int i = start; i &lt; ableVirus.size(); i++) {\t\t\tvirus.add(ableVirus.get(i));\t\t\tcomb(i + 1, cnt + 1, virus);\t\t\tvirus.remove(virus.size() - 1);\t\t}\t}\t// 바이러스 퍼진 후에 빈 칸이 있는지 확인하고 퍼지는데 걸린 시간을 반환하는 함수\tprivate static int check(int[][] map) {\t\tint sec = 0;\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tfor (int j = 0; j &lt; N; j++) {\t\t\t\tif (map[i][j] == 0) { // 빈 칸이 있으면 -1\t\t\t\t\treturn Integer.MAX_VALUE;\t\t\t\t} else {\t\t\t\t\tsec = Math.max(sec, map[i][j]);\t\t\t\t}\t\t\t}\t\t}\t\treturn sec;\t}\tstatic int[] dx = { -1, 1, 0, 0 };\tstatic int[] dy = { 0, 0, -1, 1 };\t// 바이러스 퍼트리는 함수\tprivate static int[][] BFS(int[][] copy_map, ArrayList&lt;Point&gt; virus) {\t\tQueue&lt;Point&gt; queue = new LinkedList&lt;&gt;();\t\tfor (int i = 0; i &lt; M; i++) {\t\t\tqueue.offer(virus.get(i));\t\t\tcopy_map[virus.get(i).x][virus.get(i).y] = -10; // 초기 바이러스가 있는 곳\t\t}\t\twhile (!queue.isEmpty()) {\t\t\tPoint cur = queue.poll();\t\t\tfor (int d = 0; d &lt; 4; d++) {\t\t\t\tint nx = cur.x + dx[d];\t\t\t\tint ny = cur.y + dy[d];\t\t\t\t// 범위 체크\t\t\t\tif (nx &lt; 0 || nx &gt;= N || ny &lt; 0 || ny &gt;= N)\t\t\t\t\tcontinue;\t\t\t\t// 벽이거나 초기 바이러스가 있는 곳이면 패스\t\t\t\tif (copy_map[nx][ny] != 0)\t\t\t\t\tcontinue;\t\t\t\tqueue.offer(new Point(nx, ny));\t\t\t\tif (copy_map[cur.x][cur.y] == -10) {\t\t\t\t\tcopy_map[nx][ny] = 1;\t\t\t\t} else {\t\t\t\t\tcopy_map[nx][ny] = copy_map[cur.x][cur.y] + 1;\t\t\t\t}\t\t\t}\t\t}\t\treturn copy_map;\t}\tprivate static int[][] copyArr(int[][] origin) {\t\tint[][] copy = new int[N][N];\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tfor (int j = 0; j &lt; N; j++) {\t\t\t\tcopy[i][j] = origin[i][j];\t\t\t}\t\t}\t\treturn copy;\t}}" }, { "title": "[BOJ] 17298번 오큰수 (Java/Stack)", "url": "/posts/boj-17298/", "categories": "Problem Solving, BOJ", "tags": "boj, stack", "date": "2022-06-28 17:00:00 +0900", "snippet": "문제백준 17298번 오큰수풀이1 해당하는 인덱스에 오큰수를 출력하기 위해 인덱스와 숫자값을 가지는 Element 클래스를 이용합니다. 오큰수가 없을 경우 -1을 출력해야 하므로, 오큰수를 저장하는 res 배열의 원소를 전부 -1로 초기화합니다. 스택의 top보다 현재 입력받는 수가 크면, 현재 수는 스택의 top의 오큰수입니다. 스택의 top의 인덱스에 현재 수(=오큰수)를 저장하고, pop하여 제거합니다. 스택이 비어있지 않고, 현재 수가 스택의 top보다 크면 3, 4번 과정을 반복합니다. 스택에 현재 수를 push 합니다. 모든 수를 입력받으면 for문이 종료되고, res 배열에서 오큰수를 하나씩 출력합니다.소스 코드import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Arrays;import java.util.Stack;import java.util.StringTokenizer;public class Main {\tstatic class Element {\t\tint idx, num;\t\tpublic Element(int idx, int num) {\t\t\tsuper();\t\t\tthis.idx = idx;\t\t\tthis.num = num;\t\t}\t}\tpublic static void main(String[] args) throws Exception {\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\tStringBuilder sb = new StringBuilder();\t\tint N = Integer.parseInt(br.readLine());\t\tint res[] = new int[N]; // 출력 결과 입력하는 배열\t\tArrays.fill(res, -1); // 초기값을 -1로 설정\t\tStack&lt;Element&gt; stack = new Stack&lt;&gt;();\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tint cur = Integer.parseInt(st.nextToken());\t\t\twhile (!stack.isEmpty()) {\t\t\t\tif (stack.peek().num &lt; cur) { // 현재 수가 스택의 top보다 크면 현재 수가 오큰수\t\t\t\t\tres[stack.peek().idx] = cur; // 스택의 top 배열의 인덱스에 오큰수(=현재 수)를 넣어주고\t\t\t\t\tstack.pop(); // 스택의 top을 pop해서 제거함\t\t\t\t} else {\t\t\t\t\tbreak; // 현재 수가 오큰수가 아니면 반복문 종료하고 현재 수를 스택에 push 함\t\t\t\t}\t\t\t}\t\t\tstack.push(new Element(i, cur));\t\t}\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tsb.append(res[i]).append(\" \");\t\t}\t\tSystem.out.println(sb.toString());\t}}풀이2주어진 숫자를 모두 입력받은 후 배열의 뒤에서부터 탐색하는 방법입니다. arr 배열에 N개의 수열을 입력받습니다. 오큰수를 구하기 위해 사용할 stack 스택과, 결과를 저장할 res 스택을 선언합니다. 배열의 맨 뒤에서부터 탐색을 시작합니다. stack 스택이 비어있지 않고, 스택의 top보다 현재 탐색 중인 수가 크면 스택에서 제거하는 과정을 반복합니다. 4번 과정 반복 후 스택이 비어있지 않으면 스택의 top이 현재 탐색 중인 수의 오큰수이므로 res 스택에 push 합니다. 4번 과정 반복 후 스택이 비어있으면 현재 탐색 중인 수의 오큰수는 없으므로 res 스택에 -1을 push 합니다. 현재 탐색 중인 수를 stack에 push 합니다. 4~7번 과정을 N번 반복 후 res 스택에 저장된 오큰수를 출력합니다.소스 코드import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Arrays;import java.util.Stack;import java.util.StringTokenizer;// 뒤에서 부터 탐색public class Main {\tpublic static void main(String[] args) throws Exception {\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\tStringBuilder sb = new StringBuilder();\t\tint N = Integer.parseInt(br.readLine());\t\tint arr[] = new int[N];\t\tStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\t\tStack&lt;Integer&gt; res = new Stack&lt;&gt;();\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tarr[i] = Integer.parseInt(st.nextToken());\t\t}\t\tfor (int i = N - 1; i &gt;= 0; i--) {\t\t\twhile (!stack.isEmpty() &amp;&amp; arr[i] &gt;= stack.peek()) {\t\t\t\tstack.pop();\t\t\t}\t\t\tif (!stack.isEmpty()) {\t\t\t\tres.push(stack.peek());\t\t\t} else {\t\t\t\tres.push(-1);\t\t\t}\t\t\tstack.push(arr[i]);\t\t}\t\tfor (int i = 0; i &lt; N; i++) {\t\t\tsb.append(res.pop()).append(\" \");\t\t}\t\tSystem.out.println(sb.toString());\t}}" }, { "title": "[Java] JVM, JRE, JDK", "url": "/posts/jvm/", "categories": "Programming Language, Java", "tags": "java, jvm, jre, jdk", "date": "2022-06-27 10:00:00 +0900", "snippet": "운영체제에 독립적JVM(Java Virtual Machine) Java로 작성된 프로그램이 돌아가도록 만들어주는 것 자바 소스코드로 만들어지는 .class 파일을 실행할 수 있음 자바 바이트 코드를 실행하는 가상 환경 운영체제가 달라져도 자바 코드가 동일하게 작동할 수 있도록 환경을 제공함 WORA(Write one Run Anywhere)를 만족시킴 한 번 작성한 프로그램은 어떤 운영체제 혹은 플랫폼에서도 동일하게 실행되므로 이식성이 좋음JRE(Java Runtime Environment) JVM이 자바 프로그램을 동작시킬 때 필요한 라이브러리 파일 등을 가지고 있음 JRE는 JVM, Java Class Librarie, Class Loader 요소로 구성됨 Java Class Librarie: java.io, java.util, java.thread 등 작동에 필수적인 요소를 가지고 있음 Class Loader: 필요한 클래스들을 JVM 위로 올려주는 역할을 함JDK(Java Development Kit) 자바를 활용하여 프로그램을 개발할 때 필요한 도구 모음 자바 프로그램을 실행해야 하므로 JRE를 포함하고 있으며, 컴파일러(javac)와 디버거(Jdb) 등이 포함되어 있음 개발과 실행에 필요한 환경 및 기능 제공의 폭에 따라 표준형인 SE(Standard Edition)과 여러 기능이 추가된 EE(Enterprise Edition)으로 나뉨 JDK 8버전과 11버전이 가장 널리 쓰임자바 컴파일 과정 .java 코드 작성 후 run 버튼 눌러서 실행 자바 컴파일러가 소스코드를 읽어서 바이트 코드로(.class) 컴파일, 여기서 바이트 코드는 컴퓨터는 읽을 수 없지만 JVM은 읽을 수 있음 컴파일된 바이트 코드를 JVM의 클래스 로더에 전달 클래스 로더는 동적 로딩을 통해서 필요한 클래스들을 로딩 및 링크하여 런타임 데이터 영역(Runtime Data Area), 즉 JVM의 메모리에 올림 실행엔진(Execution Engine)은 JVM 메모리에 올라온 바이트 코드들을 명령어 단위로 하나씩 가져와서 실행 인터프리터 방식: 바이트 코드 명령어를 하나씩 읽어서 해석하고 실행, 전체적인 실행속도가 느림 JIT 컴파일러 방식: 바이트 코드 전체를 컴파일하여 바이너리 코드로 변경하고 직접 실행하는 방식, 전체적인 속도가 인터프리터 방식보다 빠름자바 컴파일 과정에서 JVM의 역할 바이트 코드로 변환된 코드를 클래스 로더가 JVM의 메모리에 올리면 JVM의 실행엔진인 인터프리터나 JIT 컴파일러가 해석하고 실행하는 역할을 함 JVM은 다른 프로그램을 실행시키는 것이 목적이므로, 자바 프로그램이 어느 플랫폼이나 운영체제 상에서도 실행될 수 있도록 하고, 프로그램 메모리를 관리하여 최적화 함Class Loader자바 컴파일러를 통해서 .class 확장자를 가진 파일들은 한 번에 로드되지 않고, 애플리케이션에서 필요할 때 로드된다. 클래스 파일들은 각 디렉터리에 흩어져있으며, 기본적인 라이브러리 클래스 파일들은 환경변수 설정 시 지정했던 $JAVA_HOME 내부 경고에 존재한다. 따라서 각각의 클래스 파일들을 찾아서 JVM 메모리에 탑재해주는 역할을 하는 것이 바로 ClassLoader의 역할이다.ClassLoader는 크게 Loading, Linking, Initialization 3가지 역할을 한다.Loading각 디렉터리에 흩어진 클래스 파일을 JVM 메모리에 탑재한다. 각 클래스 파일이 개발자가 작성한 것인지, 기본 제공 클래스 파일인지와 같은 기준에 의해서 세 가지로 나뉜다.Bootstrap ClassLoader JVM 실행 시 가장 최초로 실행되는 클래스 로더 다른 모든 클래스 로더의 부모가 되는 클래스 로더 JVM을 구동시키기 위한 가장 필수적인 라이브러리의 클래스들을 JVM에 로드함 가장 상위 클래스 로더이므로 탑재되는 운영체제에 맞게 네이티브 코드로 작성됨Extensions ClassLoader Bootstrap ClassLoader 다음 우선순위를 가지는 클래스 로더 localedata, zipfs 등 확장 자바 클래스 라이브러리를 JVM에 로드함 ${JAVA_HOME}/jre/lib/ext에 있는 클래스 파일들을 로드함Application ClassLoader(System ClassLoader) 개발자가 자바 코드로 작성한 클래스 파일들, Classpath에 있는 클래스들을 로드함 개발자가 클래스 로더를 직접 구현할 경우, Application ClassLoader의 자식 형태인 ClassLoader를 구성하게 됨위의 ClassLoader를 모두 거쳐도 클래스 파일을 찾지 못하면, ClassNotFoundException 예외가 발생한다.Linking로드된 클래스 파일들을 검증하고, 사용할 수 있게 준비하는 과정이다. 크게 Verification, Preparation, Resolution의 세 단계로 나뉜다.Verification 클래스 파일이 유효한지 확인하는 과정 클래스 파일이 JVM의 구동 조건대로 구현되지 않았을 경우 VerifyError 발생Preparation 클래스 및 인터페이스에 필요한 static field 메모리를 할당하고 이를 기본값으로 초기화 초기화된 값들은 뒤의 Initialization 과정에서 코드에 작성된 초기값으로 변경됨Resolution Symbolic Reference 값을 JVM의 메모리 구성 요소인 Method Area의 런타임 환경 풀을 통해 Direct Reference라는 메모리 주소 값을 바꿔줌 JVM Instruction의 new와 instanceof가 영향을 받음Initialization클래스 파일의 코드를 읽는 단계이다. class와 interface의 값들을 지정한 값들로 초기화하고, 초기화 메소드를 실행시킨다.이때 JVM은 멀티스레딩으로 작동하며, 동시에 초기화를 하는 경우가 있기 때문에 초기화 단계에서도 동시성을 고려해줘야 한다.클래스 로더 과정이 끝나면 본격적으로 JVM에서 클래스 파일을 구동시킬 준비가 끝난다.Runtime Data Area(JVM Memory)JVM의 Runtime Data Area에는 크게 Method Area, Heap, Java Stacks, Native Method Stacks, PC registers 가 존재한다.Method Area 인스턴스 생성을 위한 객체 구조, 생성자, 필드 등이 저장됨 Rumtime Constant Pool과 static 변수, 메소드 데이터, Class 데이터들도 이 곳에서 관리됨 이 영역은 JVM 당 하나만 생성되므로, 모든 Thread들이 Method Area를 공유함 JVM의 다른 메모리 영역에서 정보 요청이 오면, 실제 물리 메모리 주소로 변환해서 전달함 JVM 구동 시 생성되고, 종료시까지 유지됨Heap 코드 실행을 위한 Java로 구성된 객체 및 JRE 클래스들이 탑재됨 문자열 정보를 가진 String Pool, 실제 데이터를 가진 인스턴스, 배열 등이 저장됨 JVM 당 하나만 생성되고, 해당 영역의 데이터는 모든 Java Stack 영역에서 참조되어, Thread들이 공유함 Heap 영역이 가득 차면 OutOfMemoryError가 발생함 Heap에서는 참조되지 않는 인스턴스와 배열에 대한 정보를 얻을 수 있기 때문에 GC의 주 대상이 됨 Thread 별로 메모리를 할당받는 Stack 영역에 비해 속도가 느림 모든 Thread가 공유하므로 동시성 문제가 발생하며, synchronized 블록을 사용하는 등의 방법을 통해 동시성을 지켜줘야 함Java Stacks 각 Thread 별로 할당되므로 Heap 메모리 영역보다 빠름 각 Thread 별로 메모리를 따로 할당하므로 동시성 문제에서 자유로움 각 Thread는 메소드를 호출할 때마다 Frame이라는 단위를 추가(push)하며, 메소드가 마무리되어 결과를 반환한 Frame은 해당 Stack에서 제거(pop)됨 Frame은 메소드 안의 지역변수를 가지고 있는 Local Variable, 메소드 내 연산을 위한 Operand Stack, Constant Pool 참조를 위한 Constant Pool Reference로 구성됨 메소드가 호출될 때마다 Stack에 Frame이 쌓임 Frame의 연산이 끝나면, 호출한 상위 Frame에 결과값을 반환함 Java Stack 영역이 가득 차면 StackOverflowError가 발생함Native Method Stacks(C Stacks) 다른 프로그래밍 언어로 작성된 메소드들을 Native Method라고 함 Native Method Stacks는 다른 프로그래밍 언어로 작성된 메소드들을 다루는 영역 Java Stacks 영역과 유사하게 Native Method가 실행될 경우 Native Method Stack에 해당 메서드가 쌓임 Thread 별로 Native Method Stack을 가지고 있음PC registers Thread가 각자의 메소드를 실행할 때, Thread 별로 동시에 실행하는 환경이 보장되어야 하므로 명령어 주소값을 저장할 공간이 필요함 Thread들은 각각 PC Registers를 가지고 있으며, PC Registers는 JVM에서 사용된 명령의 주소값을 저장함 실행한 메소드가 Native 하다면 undefined가 기록됨" }, { "title": "[OS] Process와 Thread", "url": "/posts/process-thread/", "categories": "Computer Science, OS", "tags": "thread, multi-threading, process, processor, cpu, multi-process, pcb, context-switching", "date": "2022-06-25 10:00:00 +0900", "snippet": "용어 정리프로세서(Processor) 하드웨어적 측면: 컴퓨터 내에서 프로그램을 수행하는 하드웨어 유닛, 중앙처리장치(CPU) 등 소프트웨어적 측면: 데이터 포맷을 변환하는 역할을 수행하는 데이터 처리 시스템, 워드프로세서, 컴파일러 등프로세스(Process) 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램, 작업의 목록, 스케줄링의 대상이 됨프로그램(Program) 하드디스크 등의 저장공간에 저장되어 있는 코드와 리소스 등이 집합되어 있는 파일스레드(Thread) 프로세스 내 작업의 단위, 프로세스에서 한 단계 낮춰 규정한 것프로세스와 스레드프로세스 컴퓨터에서 실행되고 있는 프로그램 Code, Data, Stack, Heap으로 구성된 독립된 메모리 영역을 할당 받음 1개 이상의 스레드를 가지고 있음스레드 프로세스가 할당받은 자원을 이용하는 실행의 단위 스레드끼리 프로세스의 메모리를 공유하며 작동할 수 있음 프로세스 메모리 영역 내에서 Code, Data, Heap 형식으로 할당된 메모리 영역은 공유함 Stack, PC register 형식으로 할당된 메모리 영역은 스레드 별로 따로 할당받음Stack, PC register를 독립적으로 가지는 이유Stack Stack은 함수 호출 시 전달되는 인자, 되돌아갈 주소값, 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간 스택 메모리 공간이 독립적이라는 것은, 독립적인 함수 호출이 가능하다는 것 스레드의 정의에 따라 독립적인 실행 흐름을 추가하기 위한 최소 조건PC register PC 값은 스레드가 명령어의 어디까지 수행하였는지 나타냄 스레드는 CPU를 할당 받았다가 스케줄러에 의해 다시 선점되므로, 어느 부분까지 수행했는지 기억해야 함PCB(Process Control Block) 프로세스 제어 블록 특정 프로세스에 대한 중요한 정보를 저장하고 있는 운영체제의 자료구조 프로세스가 생성되면 운영체제는 해당 프로세스의 PCB를 생성함 프로세스 작업 중 프로세스 간 전환이 발생하면, 진행하던 작업 상황을 PCB에 저장하고 CPU를 반환함 이후 다시 CPU를 할당받을 때 PCB에 저장된 내용을 불러와 이전에 종료한 시점부터 다시 작업을 진행함 아래와 같은 정보들이 저장됨 Process State(프로세스 상태): new, ready, running 등 프로세스의 상태 정보 Process ID(프로세스 ID): 프로세스 ID, 해당 프로세스의 자식 프로세스 ID Process priority(프로세스 권한): 컴퓨터 자원 또는 I/O 디바이스에 대한 권한 정보 Program counter(프로그램 카운터): 프로세스에서 실행해야 할 다음 명령어의 주소에 대한 포인터 CPU register(CPU 레지스터): 프로세스를 실행하기 위해 저장해야 할 레지스터에 대한 정보 Context Switching(문맥 교환) PCB를 교환하는 과정 프로세스에 할당된 시간이 끝나거나 인터럽트에 의해 발생함 사용자 입장에서는 컴퓨터가 동시에 여러 프로그램을 실행하는 것처럼 보이지만, 프로세스 간 context switching을 통해 실행되는 프로세스를 전환하는 것멀티태스킹 VS 멀티스레드멀티 태스킹(Multi-Tasking) 하나의 운영체제 안에서 여러 프로세스가 실행되는 것 여러 프로세스가 동시에 실행되는 것처럼 보이지만, CPU 스케줄링에 의해 번갈아 가며 실행되는 것멀티 스레드(Multi-Thread) 하나의 프로세스가 여러 개의 스레드로 여러 작업을 수행하는 것멀티 프로세스(Multi-Process) 두 개 이상의 프로세서(CPU)가 하나의 작업을 동시에 처리하는 것 하나의 프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 처리하도록 하는 것 IPC(Inter-Process Commuication): 프로세스끼리 데이터를 주고받고 공유 데이터를 관리하는 방법 장점: 프로세스 중 하나에 문제가 생겨도 다른 프로세스에 영향을 주지 않음 단점: 독립된 메모리 영역이기 때문에 작업량이 많을수록 Context Switching이 자주 일어나 성능저하가 발생할 수 있음" }, { "title": "[Java] Java란..?", "url": "/posts/java/", "categories": "Programming Language, Java", "tags": "java", "date": "2022-06-23 08:00:00 +0900", "snippet": "Java 프로그래밍 언어 중 하나로 컴퓨터 프로그램, 웹/모바일 애플리케이션 등을 만드는 데 사용됨 전 세계적으로 가장 많이 사용되는 언어 중 하나로 2022년 6월 기준 Python, C에 이어 3위를 차지함 https://www.tiobe.com/tiobe-index/자바 언어를 사용하는 이유 객체 지향적 언어로 유지보수가 쉽고 재사용성이 뛰어나며 생산성이 높습니다. 운영체제에 독립적이므로, JVM을 통해 운영체제나 플랫폼에 관계없이 실행 가능합니다. Garbage Collection(GC)이 자동으로 메모리를 관리해주므로, 개발자가 따로 메모리 관리를 하지 않아도 됩니다. 분산처리에 용이합니다. 다양한 네트워크 프로그래밍 라이브러리를 통해 빠른 시간 안에 네트워크 관련 프로그램을 쉽게 개발할 수 있도록 지원합니다. 멀티스레드를 지원하며, 여러 스레드에 대한 스케줄링을 자바 인터프리터가 담당합니다. 동적 로딩을 지원하므로, 실행 시에 모든 클래스가 로딩되지 않고 필요한 시점에 클래스를 로딩하여 사용할 수 있습니다.절차지향 언어와 객체지향 언어의 비교   절차지향 언어(Procedural Programming) 객체지향 언어(Object-oriented Language) 개념 - 순차적인 처리를 중요시 하며, 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법- 대표적으로 C언어가 있음 - 객체란 물리적으로 존재하여 다른 것과 식별 가능한 것- 객체는 관련된 데이터와 함수(메소드)의 집합- 실제 세계를 모델링하여 소프트웨어를 개발하는 방식- 객체지향 언어란 프로그램을 다수의 객체로 만들고 이들끼리 서로 상호작용 하도록 만드는 것- Java, Python, C# 등이 있음 장점 - 컴퓨터의 처리구조와 유사해 실행속도가 빠름 - 재사용성 우수, 생산성 증가- 유지보수가 용이함- 자연스러운 모델링 가능- 디버깅이 쉬움 단점 - 하나의 문제를 해결하기 위해 시스템 전체를 수리해야 하므로 유지보수가 어려움- 디버깅이 어려움- 실행 순서가 정해져있으므로 코드의 순서가 바뀌면 동일한 결과를 보장하기 어려움- 비효율적, 언어의 융통성 부족 - 절차지행에 비해 느린 실행 속도- 설계에 많은 시간이 소요됨 객체지향 언어의 특징OOP is APIE추상화(Abstraction) 추상화: 복잡한 것을 단순하게 표현하는 방법 추상화란 실존하는 객체의 여러 특성 중, 프로그램을 만드는 데 필요한 공통적인 특징, 속성, 기능 등을 추출하는 것 객체, 클래스, 변수 등을 사용해서 어떻게 작동하는 지 나타내는 것다형성(Polymorphism) 하나의 클래스나 메소드가 다양한 방식으로 동작 가능한 것 상속을 통해 기능을 확장하거나 변경하는 것을 가능하게 함 오버라이딩(Overriding): 부모 클래스 메소드의 동작 방식을 재정의하여 우선적으로 사용하는 것 오버로딩(Overloading): 하나의 클래스에서 다른 parameter를 갖는 같은 이름의 메소드를 여러 개 정의할 수 있음상속(Ingeritance) 부모로부터 자식이 상속받듯이, 자식 클래스가 부모 클래스로부터 상속받은 속성을 사용할 수 있는 것 이미 작성된 클래스를 재활용해서 새로운 클래스를 생성하는 기법캡슐화(Encapsulation) 관련된 데이터와 알고리즘을 하나로 묶고 외부에서 쉽게 접근하지 못하도록 숨기는 것 private로 정의된 속성을 외부에 노출시키지 않고 자신의 클래스에서만 사용함 캡슐화되어있지 않은 데이터와 코드는 사용하기 어려움" }, { "title": "[OS] 운영체제란..?", "url": "/posts/os/", "categories": "Computer Science, OS", "tags": "cs, operating, system, os", "date": "2022-06-22 02:20:00 +0900", "snippet": "운영체제(Operating System)운영체제는 사용자가 컴퓨터를 편리하고 효율적으로 사용할 수 있도록, 하드웨어 자원을 관리하고 환경을 제공하는 시스템 소프트웨어를 말합니다.대표적인 운영체제로는 MS-DOS, Windows, Linux, Unix, Mac OS, iOS 등이 있습니다.운영체제의 목적 처리능력(Throughput) 향상: 일정 시간 내에 시스템이 처리하는 일의 양 향상 반환시간(Turn Around Time) 단축: 시스템에 작업을 의뢰한 시간부터 처리완료까지 걸린 시간 단축 사용가능도(Availability) 향상: 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도 향상 신뢰도(Reliability) 향상: 시스템이 주어진 문제를 정확하게 해결하는 정도 향상운영체제의 역할 프로세스 관리 저장장치 관리 네트워킹 사용자 관리 디바이스 드라이버 관리프로세스 관리운영체제에서 작동하는 응용 프로그램을 관리하는 기능입니다.어떤 의미에서는 프로세서(CPU)를 관리하는 것이라고 볼 수도 있습니다. 현재 CPU를 점유해야 할 프로세스를 결정하고, CPU를 프로세스에 할당하며, 이 프로세스 간 공유 자원 접근과 통신 등을 관리하게 됩니다.저장장치 관리1차 저장장치에 해당하는 메인 메모리와 2차 저장장치에 해당하는 하드디스크, NAND 등을 관리하는 기능입니다. 1차 저장장치(Main Memory) 프로세스에 할당하는 메모리 영역의 할당과 해제 각 메모리 영역 간의 침범 방지 메인 메모리의 효율적 활용을 위한 가상 메모리 기능 2차 저장장치(HDD, NAND Flash Memory 등) 파일 형식의 데이터 저장 이런 파일 데이터 관리를 위한 파일 시스템을 OS에서 관리 네트워킹TCP/IP 기반의 인터넷에 연결하거나, 응용 프로그램이 네트워크를 사용하려면 운영체제에서 네트워크 프로토콜을 지원해야 합니다. 현재 상용 OS들은 다양하고 많은 네트워크 프로토콜을 지원합니다.사용자 관리하나의 PC로 여러 사람이 사용하는 경우가 있습니다. 따라서 운영체제는 한 컴퓨터를 여러 사람이 사용하는 환경도 지원해야 합니다.운영체제는 각 계정을 관리할 수 있는 기능이 필요합니다. 개인의 파일에 대해서 다른 사용자가 접근할 수 없도록 해야 합니다. 이 외에도 파일이나 시스템 자원에 접근 권한을 지정할 수 있도록 지원하는 것이 사용자 관리 기능입니다.디바이스 드라이버 관리운영체제는 시스템의 자원, 하드웨어를 관리합니다. 시스템에는 여러 하드웨어가 붙어있는데, 이들은 운영체제에서 인식하고 관리하게 만들어 응용 프로그램이 하드웨어를 사용할 수 있게 만들어야 합니다.따라서, 운영체제 안에 하드웨어를 추상화 해주는 계층이 필요하며, 이 계층을 디바이스 드라이버라고 부릅니다. 하드웨어의 종류가 많은 만큼, 운영체제 내부의 디바이스 드라이버도 많이 존재합니다." }, { "title": "[Sort] Tim Sort(Insert Sort + Merge Sort)", "url": "/posts/tim-sort/", "categories": "Algorithm, Sort", "tags": "tim, sort", "date": "2022-06-22 01:40:00 +0900", "snippet": "Tim Sort 등장배경$C × nlogn + α$ 정렬들에 참조 지역성 원리를 적용하면 힙 정렬은 한 위치에 있는 요소를 해당 요소의 인덱스 두 배 또는 절반인 요소와 반복적으로 비교하기에 $C$값이 크므로 참조 지역성이 좋지 않다. 병합 정렬은 참조 지역성 원리는 어느 정도 만족하나, 추가 메모리가 필요하다는 단점이 있다. 퀵 소트의 경우 피벗 주변에서 데이터가 이동하므로 참조 지역성이 좋으며 추가 메모리도 불필요하나, 피벗을 선정하는 방법에 따라 최악의 경우 $O(n2)$의 시간 복잡도를 가질 수 있다.이와 같이 모든 정렬 알고리즘에 장단점이 있으므로, 상수 $C$의 값이 너무 커지지 않게 동작하면서, 추가 메모리도 많이 사용하지 않고, 최악의 경우에도 $O(nlong)$으로 동작하는 정렬 알고리즘이 필요했습니다.Tim Sort 개념 삽입 정렬(Insert Sort)과 병합 정렬(Merge Sort)을 결합하여 만든 정렬 최선의 시간 복잡도는 $O(N)$, 평균은 $O(nlogn)$이며, 최악의 경우에도 $O(nlogn)$의 시간 복잡도를 가짐 추가 메모리를 사용하지만 기존의 병합 정렬에 비해 적은 추가 메모리를 사용함Insert Sort를 결합한 이유삽입 정렬은 $O(n^2)$의 시간 복잡도를 가지지만 인접한 메모리와 비교하기 때문에 참조 지역성의 원리를 잘 만족하고 있습니다. 따라서 $n$이 작을 경우 퀵 정렬보다도 빠릅니다. 이를 이용하여 전체를 작은 덩어리로 잘라 각각을 삽입 정렬로 정렬한 뒤 병합하면 더 빠르지 않을까 하는 것이 Tim Sort의 기본 아이디어입니다.Tim Sort 과정 리스트를 $2^x$개씩 자른다. 이때 잘린 덩어리를 run이라고 부른다. $2^x$는 minrun이라 부르며, 전체 원소의 개수가 $N$일 때 minrun의 크기는 $min(N, 2^5∼2^6)$으로 정의한다. run의 개수가 2의 거듭제곱이 되도록 유동적으로 minrun의 값을 정한다. $2^x$개까지 삽입 정렬을 진행하고, 그 이후의 원소에 대해서 가능한 크게 덩어리를 만든다. 인접한 run을 병합 정렬을 통해 정렬한다.Tim Sort의 최적화 기법Run하나의 run을 크게 만들수록 병합 횟수가 줄어듭니다. 따라서 $2^x$개씩 삽입 정렬로 정렬하되, 그 이후 원소는 삽입 정렬을 진행하지 않고 최대한 run을 크게 만듭니다.먼저 맨 앞의 두 원소를 비교하여 해당 run이 증가하는 덩어리인지 감소하는 덩어리인지 결정합니다. 그 후 덩어리가 $2^x$가 될 때까지 삽입 정렬을 진행합니다. 이어서 덩어리를 최대한 크게 만들기 위해 뒤의 원소 또한 증가 혹은 감소한다면 해당 덩어리에 포함시킵니다. 이 때는 삽입 정렬을 사용하지 않고 앞 원소와 비교만 진행합니다.이후 감소하는 run은 뒤집어서 모든 run이 증가하는 run이 되도록 변환합니다.Binary Insertion SortTim Sort에서는 이진 삽입 정렬을 사용합니다. 이진 탐색은 앞의 원소들은 모두 정렬되어 있다는 전제를 기반으로 탐색하므로, 참조 지역성은 떨어지지만 $O(logn)$번의 비교를 진행하므로 조금 더 시간을 절약할 수 있습니다.Merge만들어진 run을 병합 정렬할 경우 최대한 크기가 비슷한 run끼리 병합해야 메모리와 시간을 절약할 수 있습니다.이를 위해 하나의 run이 만들어질 때마다 스택에 담습니다. 이때 run을 스택에 push할 때마다 스택의 상위 3개의 run이 위의 두 조건을 만족해야 합니다. 만약 조건을 만족하지 않으면 $B$는 $A$와 $C$ 중 작은 run과 병합합니다.위의 방법으로 병합할 두 run을 알아낸 후에는 병합 정렬의 가장 큰 단점인 추가 메모리 $n$ 사용을 효율적으로 해결해야 합니다.먼저 두 개의 run중 크기가 더 작은 run을 복사하고, 각 run의 시작 혹은 끝 부분부터 크기 비교를 하여 작은 순서대로 앞을 채우면서 병합을 진행합니다. 이 경우 두 run 중 크기가 작은 run을 담을 메모리가 필요하므로 $n/2$의 추가 메모리만 사용해도 병합을 진행할 수 있습니다.GallopingGalloping은 병합 과정에서 추가로 사용되는 최적화 방법입니다.무작위적이지 않은 실생활 데이터의 특성을 이용하여 MIN_GALLOP번 연속으로 한 run에서 병합되었을 경우 galloping mode로 전환하여 $2^k$개씩 뛰어 넘으며 대소 비교를 진행합니다. 더 이상 선택되지 않는 부분을 만났을 경우 그 이전의 지점과 그 지점 사이의 범위에서만 이분 탐색을 진행하여 어디까지 병합할지를 결정합니다.실제 사용에서는 galloping mode에 들어가는 횟수가 많으면 MIN_GALLOP은 감소하고, 아닐 경우 증가하여 더 효율적으로 동작하도록 진행합니다.참고링크NAVER D2 Tim sort에 대해 알아보자" }, { "title": "[Sort] 정렬 알고리즘(nlogn)", "url": "/posts/sort-nlogn/", "categories": "Algorithm, Sort", "tags": "sort, heap, merge, quick", "date": "2022-06-22 01:40:00 +0900", "snippet": "목차 사전지식 O(nlogn) 정렬사전지식 시간복잡도 Big-O 표기법 안정 정렬 / 불안정 정렬 참조 지역성 원리시간복잡도알고리즘의 시간 복잡도란 ‘입력값의 변화에 따라 연산을 실행할 때, 연산 횟수에 비해 시간이 얼마나 소요되는가?’를 의미합니다.효율적인 알고리즘이란 입력값이 커짐에 따라 증가하는 시간의 비율을 최소화한 알고리즘이라고 할 수 있습니다.시간 복잡도는 주로 Big-O 표기법을 사용해 나타냅니다.Big-O 표기법Big-O(빅오) 표기법을 사용하면 프로그램이 실행되는 과정에서 소요되는 가장 최악의 시간까지 고려할 수 있습니다.따라서 평균과 가까운 성능으로 예측하기 용이하므로 Big-O 표기법을 가장 많이 사용합니다.여러 함수의 증가율 비교안정정렬과 불안정정렬안정 정렬과 불안정 정렬의 구분은 입력에 중복된 값이 있을 경우 어떻게 정렬하는가에 따라 나뉩니다. 안정 정렬: 중복된 값이 있을 경우 입력 순서와 동일하게 정렬됨 Ex) 삽입 정렬, 버블 정렬, 병합 정렬 불안정 정렬: 중복된 값이 있을 경우 입력 순서와 관계없이 무작위로 정렬됨 Ex) 선택 정렬, 퀵 정렬, 힙 정렬 참조지역성 원리$O(nlogn)$ 시간 복잡도 알고리즘의 실제 동작 시간은 $C × nlogn + α$로 나타낼 수 있는데, 이때 $C$에 따라 같은 $nlogn$이더라도 시간 차이가 발생합니다.이 $C$에 영향을 미치는 요소로 ‘알고리즘이 참조 지역성(Locality of Reference) 원리를 얼마나 잘 만족하는가’가 있습니다.참조 지역성 원리란, CPU가 미래에 원하는 데이터를 예측하여 속도가 빠른 장치인 캐시 메모리에 담아놓는데, 이때의 예측률을 높이기 위해 사용하는 원리입니다. 쉽게 말하자면, 최근에 참조한 메모리나 그 메모리와 인접한 메모리를 다시 참조할 확률이 높다는 이론을 기반으로 캐시 메모리에 담아놓는 것입니다.메모리를 연속으로 읽는 작업은 캐시 메모리에서 읽어오기에 빠른 반면, 무작위로 읽는 작업은 메인 메모리에서 읽어오기에 속도의 차이가 있습니다.O(nlogn) 정렬 힙 정렬 병합 정렬 퀵 정렬힙 정렬(Heap Sort)힙 정렬 개념 자료구조 ‘힙(heap)’ 완전 이진트리의 일종으로 우선순위 큐를 위해 만들어진 자료구조 최댓값, 최솟값을 쉽게 추출할 수 있는 자료구조 힙 정렬이란 최대 힙 트리나 최소 힙 트리를 구성해 정렬하는 방법을 말함 힙 정렬 과정(오름차순) 원소를 입력받고 최대 힙 구조로 만든다. 힙에서 최댓값(루트 노드)을 꺼내 힙 배열의 끝 부분에 저장한다. 힙의 최대값(루트 노드)를 가장 마지막 원소의 위치와 바꿔준다. 힙의 크기를 1만큼 줄이고, 트리를 다시 최대 힙 구조로 복구한다. 힙의 크기가 0이 될 때까지 2~4번 과정을 반복한다.힙 정렬 장점 배열을 정렬하는 데 추가 메모리를 요구하지 않음 최악의 경우에도 $nlogn$의 시간 복잡도힙 정렬 단점 불안정 정렬힙 정렬 Java Codeimport java.util.Arrays;import java.util.Random;public class HeapSort { static final int N = 10; public static void main(String[] args) { Random random = new Random(); // 랜덤함수를 이용 int[] arr = new int[N]; for (int i = 0; i &lt; N; i++) { arr[i] = random.nextInt(100); // 0 ~ 99 } System.out.println(\"정렬 전: \" + Arrays.toString(arr)); heapSort(arr); System.out.println(\"정렬 후: \" + Arrays.toString(arr)); } private static void heapSort(int[] arr) { int n = arr.length; // maxHeap을 구성 // n/2-1 : 부모노드의 인덱스를 기준으로 왼쪽(i*2+1) 오른쪽(i*2+2) // 즉 자식노드를 갖는 노트의 최대 개수부터 for (int i = n / 2 - 1; i &gt;= 0; i--) { heapify(arr, n, i); // 일반 배열을 힙으로 구성 } for (int i = n - 1; i &gt; 0; i--) { swap(arr, 0, i); heapify(arr, i, 0); // 요소를 제거한 뒤 다시 최대힙을 구성 } } private static void heapify(int[] arr, int n, int i) { int p = i; int l = i * 2 + 1; int r = i * 2 + 2; // 왼쪽 자식노드 if (l &lt; n &amp;&amp; arr[p] &lt; arr[l]) p = l; // 오른쪽 자식노드 if (r &lt; n &amp;&amp; arr[p] &lt; arr[r]) p = r; // 부모노드 &lt; 자식노드 if (i != p) { swap(arr, p, i); heapify(arr, n, p); } } private static void swap(int[] arr, int a, int b) { int temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; }}병합 정렬(Merge Sort)병합 정렬 개념병합 정렬은 각 단계에서 입력을 반으로 나눠 재귀 호출을 통해 정렬하는 방법을 말합니다.병합 정렬 과정 분할(Divide): 입력 배열을 같은 크기의 2개의 배열로 분할한다. 정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 1 이상이면 재귀호출을 통해 다시 분할 정복을 적용한다. 결합(Combine): 정렬된 부분 배열을 다시 하나의 배열로 합병하고 이 결과를 임시 배열에 저장한다. 복사(Copy): 임시 배열에 저장된 결과를 원래의 배열에 복사한다.병합 정렬 장점 안정 정렬 최악의 경우에도 $nlogn$의 시간 복잡도 연결 리스트 정렬에 적합함병합 정렬 단점 정렬되지 않은 배열과 같은 크기의 추가 공간이 필요함 큰 배열에 정렬에는 사용하기 어려움병합 정렬 Java Codeimport java.util.Arrays;import java.util.Random;public class MergeSort { static final int N = 10; public static void main(String[] args) { Random random = new Random(); // 랜덤함수를 이용 int[] arr = new int[N]; for (int i = 0; i &lt; N; i++) { arr[i] = random.nextInt(100); // 0 ~ 99 } System.out.println(\"정렬 전: \" + Arrays.toString(arr)); mergeSort(0, N - 1, arr); System.out.println(\"정렬 후: \" + Arrays.toString(arr)); } // divide private static void mergeSort(int start, int end, int[] arr) { if (start &gt;= end) return; int mid = (start + end) / 2; mergeSort(start, mid, arr); // left mergeSort(mid + 1, end, arr); // right merge(start, mid, end, arr); } // conquer private static void merge(int start, int mid, int end, int[] arr) { int[] temp = new int[end - start + 1]; int i = start, j = mid + 1, k = 0; // combine while (i &lt;= mid &amp;&amp; j &lt;= end) { if (arr[i] &lt; arr[j]) temp[k++] = arr[i++]; else temp[k++] = arr[j++]; } while (i &lt;= mid) temp[k++] = arr[i++]; while (j &lt;= end) temp[k++] = arr[j++]; // copy while (k-- &gt; 0) arr[start + k] = temp[k]; }}퀵 정렬(Quick Sort)퀵 정렬 개념 분할 정복과 피벗을 사용한 정렬 방법입니다. 퀵 정렬은 합병 정렬과 다르게 리스트를 비균등하게 분할합니다.퀵 정렬 과정 리스트의 첫 번째 원소를 피벗으로 선택한다. 피벗을 기준으로, 피벗보다 작은 원소들은 피벗의 왼쪽으로, 피벗보다 큰 원소들은 피벗의 오른쪽으로 옮겨진다. 리스트의 크기가 0이나 1이 될 때까지 위의 반복한다.퀵 정렬 장점 다른 $nlogn$ 정렬 알고리즘보다 비교적 빠름 추가 메모리 공간을 필요로 하지 않음퀵 정렬 단점 불안정 정렬 정렬된 리스트의 경우 불균형 분할에 의해 시간 복잡도가 $O(n2)$으로 더 많이 걸림퀵 정렬 Java Codeimport java.util.Arrays;import java.util.Random;public class QuickSort { static final int N = 10; public static void main(String[] args) { Random random = new Random(); // 랜덤함수를 이용 int[] arr = new int[N]; for (int i = 0; i &lt; N; i++) { arr[i] = random.nextInt(100); // 0 ~ 99 } System.out.println(\"정렬 전: \" + Arrays.toString(arr)); quickSort(0, N - 1, arr); System.out.println(\"정렬 후: \" + Arrays.toString(arr)); } private static void quickSort(int start, int end, int[] arr) { if (start &gt;= end) return; int left = start + 1, right = end; int pivot = arr[start]; while (left &lt;= right) { while (left &lt;= end &amp;&amp; arr[left] &lt;= pivot) left++; while (right &gt; start &amp;&amp; arr[right] &gt;= pivot) right--; if (left &lt;= right) { swap(arr, left, right); } else { swap(arr, start, right); } } quickSort(start, right - 1, arr); quickSort(right + 1, end, arr); } private static void swap(int[] arr, int a, int b) { int temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; }}참고링크합병 정렬(merge sort)이란힙 정렬(heap sort)이란퀵 정렬(quick sort)이란" }, { "title": "[TIL] 220507 DB+myBatis 시험공부", "url": "/posts/til-220507/", "categories": "TIL", "tags": "til, db, mybatis", "date": "2022-05-07 20:30:00 +0900", "snippet": "myBatismyBatis는 Java Object와 SQL문 사이의 자동 Mapping 기능을 지원하는 ORM Framework MyBatis SQL문을 별도의 파일로 분리해서 관리 (.xml) SQL에 변경이 있을 때마다 자바 코드를 수정하거나 컴파일 하지 않아도 됨 개발자가 익숙한 SQL을 그대로 이용하면서 JDBC 코드 작성의 불편함 제거 도메인 객체나 VO 객체를 중심으로 개발 가능 JAVA, C#, .NET, Ruby 등 다양한 언어로 구현 가능MyBatis3MyBatis3의 주요 Component 파일 설명 MyBatis 설정파일 (sqlMapConfig.xml) 데이터베이스의 접속 주소 정보나 객체의 alias, Mappping 파일의 경로 등의 고정된 환경 정보를 설정 SqlSessionFactoryBuilder MyBatis 설정 파일을 바탕으로 SqlSessionFactory를 생성 SqlSessionFactory SqlSession을 생성 SqlSession 핵심적인 역할을 하는 Class로 SQL 실행이나 Transaction 관리를 실행 SqlSession 오브젝트는 Tread-Safe하지 않으므로 thread마다 필요에 따라 생성 mapping 파일 (member.xml) SQL 문과 ORMapping을 설정 MyBatis-SpringMyBatis와 Spring을 연결해주는 역할MyBatis-Spring의 주요 Component 파일 설명 MyBatis 설정파일 (sqlMapConfig.xml) Dto 객체의 정보를 설정(Alias) SqlSessionFactoryBean MyBatis 설정 파일을 바탕으로 SqlSessionFactory를 생성 Spring Bean으로 등록해야 함 SqlSessionTemplate 핵심적인 역할을 하는 클래스로서 SQL 실행이나 Transaction 관리를 실행 SqlSession interface를 구현하며, Thread-safe함 Spring Bean으로 등록해야 함 mapping 파일 (member.xml) SQL 문과 ORMapping을 설정 Spring Bean 파일 (beans.xml) SqlSessionFactoryBean을 Bean에 등록할 때 DataSource 정보와 MyBatis Config 파일 정보, Mapping 파일의 정보를 함께 설정함 SqlSessionTemplate을 Bean으로 등록 Mapper Interfacemapping 파일에 기재된 SQL을 호출하기 위한 Interface packagename + “.” + InterfaceName + “.” + methodName이 namespace + “.” + SQL ID가 되도록 Namespace와 SQL ID를 설정해야 함 Namespace 속성에는 package를 포함한 Mapper Interface의 이름을 작성 SQL ID에는 mapping하는 method의 이름을 지정&lt;mapper namespace=\"com.ssafy.guestbook.model.mapper.MemberMapper\"&gt;\t&lt;select id=\"idCheck\" parameterType=\"string\" resultType=\"int\"&gt;\t\tselect count(userid)\t\tfrom ssafy_member\t\twhere userid = #{userid}\t&lt;/select&gt;&lt;/mapper&gt;동적 SQL 특정 조건이나 상황에 따라 변경되는 쿼리 MyBatis의 강력한 기능 중 하나 if : 조건문, where 절의 일부로 포함&lt;select id=\"findActiveBlogWithTitleLike\" parameterType=\"Blog\" resultType=\"Blog\"&gt; SELECT * FROM BLOG WHERE state = ‘ACTIVE’ &lt;if test=\"title != null\"&gt; AND title like #{title} &lt;/if&gt;&lt;/select&gt; choose (when, otherwise) : java의 switch 구문과 유사 trim (where, set) foreachDBSQL(Structured Query Language) Database에 있는 정보를 사용할 수 있도록 지원하는 언어 모든 DBMS에서 사용 가능기본 SQL 구문 insert (C)INSERT INTO table_name VALUES (col_val1, col_val2, ... col_valN); select (R)SELECT * | { [ALL | DISTINCT] column | expression [alias], ... }FROM table_name; update (U)UPDATE table_nameSET col_name1 = col_val1, col_name2 = col_val2, ..., col_nameN = col_valNWHERE conditions; delete (D)DELETE from table_name WHERE conditions;table 제약조건 컬럼에 저장될 데이터의 조건을 설정 제약조건을 설정하면 조건에 위배되는 데이터는 저장 불가 테이블 생성 시 컬럼에 직접 지정하거나, constraint로 지정, 또는 ALTER를 이용하여 설정 가능 제약조건 설명 NOT NULL 컬럼에 NULL값을 저장할 수 없음 반드시 쿼리문을 이용하여 값을 지정 UNIQUE 컬럼에 중복된 값을 지정 불가 NULL값은 허용 PRIMARY KEY 컬럼에 중복된 값 저장 불가, NULL 불가 주로 ROW를 구분하기 위한 유일한 값을 지정할 때 사용 ‘기본키’ FOREIGN KEY 특정 테이블의 PK 컬럼에 저장되어 있는 값만 저장 ‘참조키’, ‘외래키’ NULL값 허용 references를 이용하여 어떤 컬럼에 어떤 데이터를 참조하는지 반드시 지정 DEFAULT NULL값이 들어올 경우 기본으로 설정되는 값 지정 CHECK 값의 범위나 종류 지정 시험범위 myBatis 객체와 메서드 구성파일 태그들과 태그 속성 (sql, selectKey 포함) 동적쿼리 태그 테이블 제약조건 PK, FK 설정이유: 데이터의 무결성 제약사항 종류 index 특징, view 특징, 사용법 Select 실행순서 연산자 (like, in, not in, is null 등) join 종류, 사용방법 DDL 종류와 활용 create table 테이블명 select ~ from ~ 트랜잭션 그룹함수 " }, { "title": "[Spring] Spring 시작하기", "url": "/posts/spring/", "categories": "Framework, Spring", "tags": "spring, pojo, ioc, di, aop, psa", "date": "2022-04-20 20:00:00 +0900", "snippet": "Spring Framework의 등장 배경과 핵심 개념들을 정리합니다.EJB(Enterprise Java Bean)EJB란 엔터프라이즈급1 어플리케이션 개발을 단순화하기 위한 서버 측 컴포넌트 모델입니다. 여기서 Java bean이란 자바 클래스들이 복합적으로 이루어진 구조를 말합니다.EJB는 개발 시 필요한 비즈니스 객체들을 관리하는 컨테이너를 만들고 필요할 때마다 컨테이너로부터 객체를 받는 식으로 관리하자는 취지에서 탄생하였으나, 배우기 어렵고 설정이 복잡하다는 단점이 있습니다.Spring Framework의 등장배경이후 EJB가 제공하는 서비스를 지원하면서도 복잡하지 않은 경량 프레임워크들이 등장하였고, 그 중 하나가 Spring 입니다.2002년 Rod Johnson은 [Expert One-on-One J2EE Design and Development]라는 책을 출간했습니다. 책에는 약 3만 라인 가량의 예제 코드가 포함되어 있으며, 이것을 기반으로 발전시키 것이 오늘날의 스프링 프레임워크입니다.Spring의 기본 철학스프링은 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크라고 정의됩니다.스프링 삼각형POJOSpring 프레임워크에서는 POJO를 지원합니다.POJO(Plain Old Java Object)란 특정 클래스를 상속하거나 인터페이스를 구현하지 않는 평범한 자바 클래스입니다. POJO는 getter/setter를 가진 단순 자바 오브젝트로 정의하고 있습니다. 이러한 단순 오브젝트는 의존성이 없고, 추후 테스트 및 유지보수가 편리하다는 장점을 가집니다. 이로 인해 객체지향적 설계와 구현이 가능해집니다.IoC/DIIoC(Inversion of Control, 제어의 반전)은 스프링이 가지고 있는 핵심 기능입니다.일반적으로 자바의 객체 생성 및 의존관계에 있어 모든 제어권은 개발자에게 있었습니다.객체 결정 및 생성 → 의존성 객체 생성 → 객체 내의 메소드 호출 작업을 반복했습니다. 그러나 Servlet과 EJB가 나타나면서 기존의 제어권이 Servlet Container 및 EJB Container에게 넘어가게 되었습니다.스프링에서도 객체에 대한 생성과 생명주기를 관리할 수 있는 기능을 제공하고 있습니다. IoC에서의 객체는 자기가 사용할 객체를 선택하거나 생성하지 않고, 컨테이너에게 권한을 위임합니다. 따라서 프레임워크가 객체의 생명주기를 관리하게 됩니다.IoC는 DI에 의해 구현됩니다. DI(Dependency Injection, 의존성 주입)란 객체 간의 의존성을 자신이 아닌 외부에서 주입하는 개념입니다.스프링에서는 설정 파일이나, 어노테이션을 통해서 객체 간의 의존 관계를 설정할 수 있으므로, 객체는 의존하고 있는 객체를 직접 생성하거나 검색할 필요가 없게 됩니다. 개발자가 new 키워드를 사용하여 객체를 생성하지 않고, 외부 컨테이너에서 생성된 객체를 주입받게 됩니다. 이때 @Autowired 등의 Annotation을 사용합니다.AOPAOP(Aspect Oriented Programming, 관점 지향적 프로그래밍)는 문제를 바라보는 관점을 기준으로 프로그래밍하는 기법입니다.대부분 소프트웨어 개발 프로세스에서 사용하는 방법은 OOP(객체 지향 프로그래밍)입니다. 이는 객체지향 원칙에 따라 관심사가 같은 데이터를 한곳에 모아 분리하고, 낮은 결합도를 갖게 하여 독립적이고 유연한 모듈로 캡슐화를 하는 것을 일컫습니다. 그러나 이러한 과정 중 중복된 코드들이 많아지고 가독성, 확장성, 유지보수성을 떨어뜨립니다. 이러한 문제를 보완하기 위해 나온 것이 AOP입니다.AOP는 핵심기능과 공통기능을 분리시켜 핵심 로직에 영향을 끼치지 않게 공통기능을 끼워넣는 개발 형태를 가집니다. 예를 들어, 트랜잭션, 로깅, 보안과 같이 여러 모듈에서 공통으로 필요하지만 실제 모듈의 핵심이 아닌 기능들을 분리하여, 각 모듈에 적용 가능합니다. 공통 코드를 한 곳에 모음으로써 중복되는 코드를 제거할 수 있고, 한 번의 수정으로 모든 핵심 기능들의 공통 기능을 수정할 수 있어 효율적인 유지보수가 가능합니다.PSAPSA(Portable Service Abstractions, 이식 가능한 서비스의 추상화)란 환경의 변화와 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 추상화 구조를 말합니다.Spring은 Spring Web MVC, Spring Transaction, Spring Cache 등의 다양한 PSA를 제공합니다.Spring 구조스프링 모듈annotation 엔터프라이즈 시스템: 서버에서 동작하며 기업과 조직의 업무를 처리해주는 시스템. 많은 사용자들의 요청을 동시에 처리해야 하므로 서버 자원을 효율적으로 사용할 수 있어야 한다. &#8617; " }, { "title": "[Spring] 프레임워크와 라이브러리의 차이", "url": "/posts/framework-library/", "categories": "Framework, Spring", "tags": "framework, library, spring", "date": "2022-04-19 20:00:30 +0900", "snippet": "프레임워크란?프레임워크는 뼈대, 기반구조를 의미합니다.다양한 framework 종류프로그래밍에서는 소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 일련의 협업화 된 형태로 클래스들을 제공하는 것으로, 개발자는 프레임워크의 뼈대 위에서 코드를 작성하여 프로그램을 개발할 수 있습니다.라이브러리란?라이브러리란 특정 기능에 대한 도구 또는 함수들의 집합을 의미합니다. 재사용이 가능한 기능을 미리 구현해놓고, 필요한 곳에서 호출하여 사용할 수 있도록 만들어진 도구들의 집합입니다.프레임워크와 라이브러리의 차이점프레임워크와 라이브러리는 쉽고 빠른 개발을 위해 사용한다는 공통점을 가지고 있습니다.그러나 가장 큰 차이점은 흐름을 누가 가지고 있냐의 차이입니다.프레임워크는 스스로 흐름을 가지고 있으며, 개발자는 그 뼈대 위에서 필요한 코드를 작성합니다.반면 라이브러리는 개발자가 전체적인 흐름을 가지고 있으며, 자신이 원하는 기능을 구현하고 싶을 때 라이브러리를 가져와 사용합니다.예를 들어, 프레임워크는 사람이 타서 운전하는 자동차, 비행기 등에 비유할 수 있으며, 라이브러리는 사람이 사용하는 톱, 망치 등의 도구에 비유할 수 있습니다.IoC(Inversion of Control, 제어의 반전)제어의 반전이란 어떤 일을 하도록 만들어진 프레임워크에 제어의 권한을 넘김으로써 클라이언트 코드가 신경써야 할 것을 줄이는 전략입니다.일반적으로 라이브러리는 개발자가 작성하는 클라이언트 코드가 라이브러리의 메소드를 호출해서 사용합니다. 반면, 프레임워크에서는 프레임워크의 메소드가 개발자의 코드를 호출하며 이를 제어의 반전이라 합니다." }, { "title": "[CT] 페르마의 소정리(Fermat's little theorem)", "url": "/posts/fermats-little-theorem/", "categories": "Algorithm, CT", "tags": "algorithm, ct, fermat, theorem", "date": "2022-04-11 19:10:30 +0900", "snippet": "합동식대수학에서 합동식이란 숫자의 실제 크기를 불문하고, 어떤 수로 나누었을 때 나머지가 같은 수를 의미합니다.$a ≡ b (mod \\; p)$이면 $a$를 $p$로 나눈 나머지와, $b$를 $p$로 나눈 나머지는 같다.페르마의 소정리$a$가 정수이고 $p$가 소수이고 $p$가 $a$의 배수가 아닐 때 (즉, $a$가 임의의 소수 $p$의 약수가 아니므로, $a≠p$)소수 $p$와 정수 $a$에 대해서 $a^p ≡ a (mod \\; p)$만약 $a$와 $p$가 서로소이면 $a^{p-1} ≡ 1 (mod \\; p)$를 만족한다.이항계수 $nCr$ 빠르게 구하기주어지는 $n$과 $r$의 범위가 $O(nr)$의 시간과 공간 복잡도로 수행 가능하다면$\\binom{n}{r}$ = $\\binom{n-1}{r-1}$ + $\\binom{n-1}{r}$공식을 이용합니다.그러나 $n$과 $r$이 10만 ~ 100만 정도의 범위에 있을 경우에는 위의 방식을 이용하지 못합니다.이런 경우에는 항상 어떤 소수 $p$에 대한 나머지를 구하는 방식이므로$\\binom{n}{r}$ ≡ $n!$ / $(r!(n-r)!)$ $mod \\; p$ 공식을 이용합니다.여기서 페르마의 소정리를 이용하여 $r!(n-r)!$의 역원을 곱해줘야 합니다.$a^{p-1} ≡ 1 (mod \\; p)$을 만족하므로, $(mod \\; p)$에 대해서 $a$의 역원은 $a^{p-2}$ 입니다.따라서 $\\binom{n}{r}$ ≡ $n!(r!(n-r)!)^{p-2}$ $(mod \\; p)$을 만족합니다.참고링크페르마의 소정리와 활용마크다운 수식 작성법 1마크다운 수식 작성법 2마크다운 수식 작성법 3Jekyll 블로그에 MathJax로 수식 표현하기" }, { "title": "첫 포스팅 테스트", "url": "/posts/posting-test/", "categories": "Blog", "tags": "blog, test", "date": "2022-04-05 22:10:30 +0900", "snippet": "개인 공부 기록 목적으로 블로그를 개설합니다. 참고링크Jekyll Chirpy 테마GitHub Blog 만들기Chirpy 에러 해결" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: \"G-V6XXXXXXX\" # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: \"G-V6XXXXXXX\" # fill in your Google Analytics ID pv: proxy_endpoint: \"https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;\" cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically. Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ` mermaid ` and ` `.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\" /&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\" /&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.&gt; {: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ` ``` ` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ` ```{language} ` you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Tutorial", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - heading&lt;h4&gt;H4 - heading&lt;/h4&gt;ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum\\_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
